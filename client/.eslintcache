[{"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\index.js":"1","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\App.js":"2","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\Navbar.js":"3","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SavedBooks.js":"5","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\queries.js":"6","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\SignupForm.js":"8","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\mutations.js":"9","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\auth.js":"10","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\localStorage.js":"11"},{"size":273,"mtime":1665938792603,"results":"12","hashOfConfig":"13"},{"size":1636,"mtime":1665937848498,"results":"14","hashOfConfig":"13"},{"size":2524,"mtime":1664769086173,"results":"15","hashOfConfig":"13"},{"size":4761,"mtime":1665936870441,"results":"16","hashOfConfig":"13"},{"size":2547,"mtime":1665871539524,"results":"17","hashOfConfig":"13"},{"size":269,"mtime":1665871869109,"results":"18","hashOfConfig":"13"},{"size":2810,"mtime":1665874523339,"results":"19","hashOfConfig":"13"},{"size":3579,"mtime":1665938399844,"results":"20","hashOfConfig":"13"},{"size":1119,"mtime":1665874546272,"results":"21","hashOfConfig":"13"},{"size":1234,"mtime":1664769086177,"results":"22","hashOfConfig":"13"},{"size":793,"mtime":1664769086178,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1co6eyb",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\index.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\App.js",[],["49","50"],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SearchBooks.js",["51","52"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n    useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { dbData } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SavedBooks.js",["53","54","55","56"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n   const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n// if user exist, set userData to data.me, else empty object\n  const userData = data?.me || {}\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\queries.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\mutations.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\auth.js",[],"C:\\Users\\MattHlavaty\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\localStorage.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":26,"column":22,"nodeType":"63","messageId":"64","endLine":26,"endColumn":27},{"ruleId":"61","severity":1,"message":"65","line":79,"column":15,"nodeType":"63","messageId":"64","endLine":79,"endColumn":21},{"ruleId":"61","severity":1,"message":"66","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"67","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":19,"column":24,"nodeType":"63","messageId":"64","endLine":19,"endColumn":29},{"ruleId":"61","severity":1,"message":"68","line":33,"column":15,"nodeType":"63","messageId":"64","endLine":33,"endColumn":19},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'dbData' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]